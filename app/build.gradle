apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'com.google.firebase.firebase-perf'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

ext.versionMajor = 1
ext.versionMinor = 1
ext.versionPatch = project.hasProperty('versionCode') ? project.property('versionCode') as int : 1

def versionCode() {
    if (!project.hasProperty('versionCode'))
        return 1
    def code = versionMajor * 1000000 + versionMinor * 1000 + versionPatch
    println "versionCode is set to $code"
    return code
}

def versionName() {
    if (!project.hasProperty('versionCode'))
        return "1.0"
    def name = "${versionMajor}.${versionMinor}.${versionPatch}"
    println "versionName is set to $name"
    return name
}


def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    compileSdkVersion project.compileSdkVersion
    buildToolsVersion project.buildToolsVersion


    signingConfigs {
        config {
            storeFile file('/Users/jooreill/devroot/keystore/galwaybus_android.jks')
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storePassword keystoreProperties['storePassword']
            v2SigningEnabled true
        }
    }


    defaultConfig {
        applicationId "com.surrus.galwaybus"
        minSdkVersion project.minSdkVersion
        targetSdkVersion project.targetSdkVersion
        versionCode this.versionCode()
        versionName this.versionName()
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        multiDexEnabled true

        vectorDrawables.useSupportLibrary = true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
    }


}

kapt {
    correctErrorTypes = true
}



dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'com.android.support:support-v4:26.1.0'
    implementation 'com.android.support:support-vector-drawable:26.1.0'
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:${kotlin_version}"
    implementation "org.jetbrains.anko:anko:0.10.3"
    implementation "org.jetbrains.anko:anko-commons:0.10.3"
    implementation "org.jetbrains.anko:anko-appcompat-v7-commons:0.10.3"

    // ARCore
    implementation 'com.google.ar:core:0.91.0'
    implementation 'de.javagl:obj:0.2.1'


    implementation "com.android.support:appcompat-v7:${supportLibVersion}"
    testImplementation "junit:junit:${junitVersion}"
    testImplementation "org.robolectric:robolectric:${robolectricVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoAndroidVersion}"
    testImplementation "com.nhaarman:mockito-kotlin:${mockitoKotlinVersion}"
    testImplementation "com.squareup.okhttp3:mockwebserver:3.8.1"
    androidTestImplementation 'tools.fastlane:screengrab:1.1.0'

    compile('com.crashlytics.sdk.android:crashlytics:2.7.1@aar') {
        transitive = true
    }
    implementation "com.google.firebase:firebase-core:${playServicesVersion}"
    implementation "com.google.firebase:firebase-auth:${playServicesVersion}"
    implementation "com.google.firebase:firebase-database:${playServicesVersion}"
    implementation "com.google.firebase:firebase-storage:${playServicesVersion}"
    implementation "com.google.firebase:firebase-perf:${playServicesVersion}"
    implementation 'com.firebaseui:firebase-ui-auth:3.0.0'

    implementation "com.google.android.gms:play-services-location:${playServicesVersion}"
    implementation "com.google.android.gms:play-services-maps:${playServicesVersion}"

    implementation 'com.karumi:dexter:4.1.0'
    implementation 'net.danlew:android.joda:2.9.9.1'
    implementation 'com.orhanobut:logger:1.15'

    implementation 'es.voghdev.pdfviewpager:library:1.0.3'

    implementation "io.reactivex.rxjava2:rxjava:${rxJavaVersion}"
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
    implementation 'io.reactivex.rxjava2:rxkotlin:2.2.0'

    implementation 'com.squareup.okhttp3:okhttp:3.8.1'
    implementation "com.squareup.retrofit2:retrofit:${retrofitVersion}"
    implementation "com.squareup.retrofit2:converter-gson:${retrofitVersion}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${retrofitVersion}"
    implementation "com.squareup.retrofit2:converter-scalars:${retrofitVersion}"
    implementation "com.google.code.gson:gson:2.6.2"

    implementation "android.arch.lifecycle:runtime:${archComponentsVersion}"
    implementation "android.arch.lifecycle:extensions:${archComponentsVersion}"
    implementation "android.arch.lifecycle:reactivestreams:${archComponentsVersion}"
    implementation "android.arch.persistence.room:runtime:${archComponentsVersion}"
    annotationProcessor "android.arch.persistence.room:compiler:${archComponentsVersion}"
    kapt "android.arch.persistence.room:compiler:${archComponentsVersion}"
    implementation "android.arch.persistence.room:rxjava2:${archComponentsVersion}"

    annotationProcessor "android.arch.lifecycle:compiler:1.0.0"
    testImplementation "android.arch.core:core-testing:1.0.0"


    implementation "com.google.dagger:dagger-android:${daggerVersion}"
    implementation "com.google.dagger:dagger-android-support:${daggerVersion}"
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"
    kapt "com.google.dagger:dagger-android-support:${daggerVersion}"
    kapt "com.google.dagger:dagger-android-processor:${daggerVersion}"

}

apply plugin: 'com.google.gms.google-services'
