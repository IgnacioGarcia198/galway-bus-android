apply plugin: 'kotlin-multiplatform'
apply plugin: 'kotlinx-serialization'
apply plugin: 'org.jetbrains.kotlin.native.cocoapods'
apply plugin: "com.squareup.sqldelight"

// CocoaPods requires the podspec to have a version.
version = "1.0"

kotlin {
    targets {
        final def iOSTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos") \
                              ? presets.iosArm64 : presets.iosX64

        fromPreset(iOSTarget, 'iOS') {
            compilations.main.outputKinds('FRAMEWORK')
        }

        fromPreset(presets.jvm, 'android')
    }

    cocoapods {
        // Configure fields required by CocoaPods.
        summary = "Some description for a Kotlin/Native module"
        homepage = "Link to a Kotlin/Native module homepage"
    }


    sourceSets {
        commonMain.dependencies {
            // Kotlin
            implementation "org.jetbrains.kotlin:kotlin-stdlib-common:${Versions.kotlin}"

            // Coroutines
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:${Versions.kotlinCoroutines}"

            // Ktor
            implementation "io.ktor:ktor-client-core:${Versions.ktor}"
            implementation "io.ktor:ktor-client-json:${Versions.ktor}"
            implementation "io.ktor:ktor-client-logging:${Versions.ktor}"

            // Serialize
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:${Versions.kotlinxSerialization}"

            // SQL Delight
            implementation "com.squareup.sqldelight:runtime:${Versions.sqlDelight}"
        }

        androidMain.dependencies {
            // Kotlin
            implementation "org.jetbrains.kotlin:kotlin-stdlib:${Versions.kotlin}"

            // Coroutines
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${Versions.kotlinCoroutines}"
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${Versions.kotlinCoroutines}"

            // Ktor
            implementation "io.ktor:ktor-client-android:${Versions.ktor}"
            implementation "io.ktor:ktor-client-core-jvm:${Versions.ktor}"
            implementation "io.ktor:ktor-client-json-jvm:${Versions.ktor}"
            implementation "io.ktor:ktor-client-logging-jvm:${Versions.ktor}"

            // Serialize
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:${Versions.kotlinxSerialization}"

            // SQL Delight
            implementation "com.squareup.sqldelight:runtime-jvm:${Versions.sqlDelight}"
        }

        iOSMain.dependencies {
            // Coroutines
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:${Versions.kotlinCoroutines}"

            // Ktor
            implementation "io.ktor:ktor-client-ios:${Versions.ktor}"
            implementation "io.ktor:ktor-client-core-native:${Versions.ktor}"
            implementation "io.ktor:ktor-client-json-native:${Versions.ktor}"
            implementation "io.ktor:ktor-client-logging-native:${Versions.ktor}"

            // Serialize
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:${Versions.kotlinxSerialization}"

            // SQL Delight
            implementation "com.squareup.sqldelight:ios-driver:${Versions.sqlDelight}"
        }
    }
}

// workaround for https://youtrack.jetbrains.com/issue/KT-27170
configurations {
    compileClasspath
}


sqldelight {
    MyDatabase {
        packageName = "com.surrus.galwaybus.db"
        sourceFolders = ["sqldelight"]
    }
}

//task packForXCode(type: Sync) {
//    final File frameworkDir = new File(buildDir, "xcode-frameworks")
//    final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'
//
//    inputs.property "mode", mode
//    dependsOn kotlin.targets.iOS.compilations.main.linkTaskName("FRAMEWORK", mode)
//
//    from { kotlin.targets.iOS.compilations.main.getBinary("FRAMEWORK", mode).parentFile }
//    into frameworkDir
//
//    doLast {
//        new File(frameworkDir, 'gradlew').with {
//            text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
//            setExecutable(true)
//        }
//    }
//}
//
//tasks.build.dependsOn packForXCode
